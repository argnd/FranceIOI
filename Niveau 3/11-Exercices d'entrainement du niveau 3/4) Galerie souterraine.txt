import algorea.Scanner;
import static java.lang.Math.*;
class Main
{
   public static void main(String[] args)
   {
      Scanner entree = new Scanner(System.in);
      
      int H = entree.nextInt();
      int L = entree.nextInt();
      int D = entree.nextInt();
      
      int taillechemin = 1;
      
      int[][] zone  = new int[H][L];   
      
      int[][] directions= new int[][]{{0,1},{1,0},{-1,0},{0,-1}}; 
      //0->Droite 1->Bas 2->Haut 3->Gauche
      
      
      for (int i = 0; i < H;i++){//y
         for(int j = 0; j < L ; j++){ //x
            zone[i][j]= entree.nextInt();
            if (zone[i][j]==0)taillechemin++;
         }
      }
      
      int nombrearret = (int) (taillechemin /(D+1));

      
      int compteurarret =0;
      int step =1;
      int[][] arrets = new int[nombrearret][2];
      int[] cur = new int[]{0,0};  //y,x
      int lastmovedir = 0;
      
       if (D==0){ //adapt algo a D=0;
         arrets[0][0] = 0;
         arrets[0][1] = 0;
         compteurarret++;
         step=0;
         nombrearret--;
      }
      
      
      while(compteurarret<nombrearret){
         for (int i = 0; i < 4; i++){ //0->Droite 1->Bas 2->Haut 3->Gauche
           if (i!=(3-lastmovedir)){ //pas de demi tour
              int tmpy = cur[0] + directions[i][0];
              int tmpx = cur[1] + directions[i][1];
              if (tmpx >=0 && tmpx < L && tmpy >=0 && tmpy < H ){ //dans le cadre
                 if(zone[tmpy][tmpx] == 0){
                    cur[0] = tmpy;
                    cur[1] = tmpx;
                    lastmovedir = i;
                    break;
                 }
              }
            }
         }
         step++;
         if (step == D+1 ){
            step = 0;
            arrets[compteurarret][0] = cur[0]; //y
            arrets[compteurarret][1] = cur[1]; //x
            compteurarret++;
         } 
      }
      
      for (int i =0; i < nombrearret; i++){
         System.out.println(arrets[i][0]+" "+arrets[i][1]);
      }
   }
}