import algorea.Scanner;
import static java.lang.Math.*;
import java.util.*;
import java.lang.*;
class Main {
 public static Scanner entree = new Scanner(System.in);
 
 public static final int NB= entree.nextInt();
 public static void main(String[] args) {
      
      int[] blocs = new int[NB];
     
      for( int i = 0; i< NB ; i ++){
         blocs [i] = entree.nextInt();
      }
    
    final int Q= entree.nextInt();
    
    Arrays.sort(blocs);
   

   for( int i = 0; i< Q; i++){
      System.out.println(findClosest(blocs,entree.nextInt()));
   } 
     
 } //main 
 
    // Returns element closest to target in arr[]
    public static int findClosest(int arr[], int target)
    {
        int n = arr.length;
  
        // Corner cases
        if (target <= arr[0])
            return arr[0];
        if (target >= arr[n - 1])
            return arr[n - 1];
  
        // Doing binary search 
        int i = 0, j = n, mid = 0;
        while (i < j) {
            mid = (i + j) / 2;
  
            if (arr[mid] == target)
                return arr[mid];

            if (target < arr[mid]) {

                if (mid > 0 && target > arr[mid - 1]) 
                    return getClosest(arr[mid - 1], 
                                  arr[mid], target);
                  
                /* Repeat for left half */
                j = mid;              
            }

            else {
                if (mid < n-1 && target < arr[mid + 1]) 
                    return getClosest(arr[mid], 
                          arr[mid + 1], target);                
                i = mid + 1; // update i
            }
        }

        return arr[mid];
    }

    public static int getClosest(int val1, int val2, 
                                         int target)
    {
        if (target - val1 > val2 - target) 
            return val2;        
        else   
           return val1;        
    }
  
 }
